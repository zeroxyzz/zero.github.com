I"<p>如果有读过CopyOnWriteArrayList的源代码，可能你会发现它的set方法有点怪异，在方法的最后，即使在oldValue == element的情况下，还是调用了一次setArray(es)。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">transient</span> <span class="kd">volatile</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>

<span class="kd">public</span> <span class="no">E</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="no">E</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">getArray</span><span class="o">();</span>
    <span class="no">E</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">elementAt</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">oldValue</span> <span class="o">!=</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">es</span> <span class="o">=</span> <span class="n">es</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
      <span class="n">es</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">element</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Ensure volatile write semantics even when oldvalue == element</span>
    <span class="n">setArray</span><span class="o">(</span><span class="n">es</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<!--more-->

<p>网上对这个问题的讨论不少，不管是国外还是国内(其实也是抄国外的~)，其中大多观点都集中在happens-before relationship。起因是JLS(Java Language Specification)中有这样一条定义。我复制一段<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.5">JLS的定义</a>。</p>

<blockquote>
  <p>The <em>happens-before</em> relation defines when data races take place.</p>

  <p>A set of synchronization edges, <em>S</em>, is <em>sufficient</em> if it is the minimal set such that the transitive closure of <em>S</em> with the program order determines all of the <em>happens-before</em> edges in the execution. This set is unique.</p>

  <p>It follows from the above definitions that:</p>

  <ul>
    <li>An unlock on a monitor <em>happens-before</em> every subsequent lock on that monitor.</li>
    <li><strong>A write to a <code class="language-plaintext highlighter-rouge">volatile</code> field (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.4">§8.3.1.4</a>) <em>happens-before</em> every subsequent read of that field.</strong></li>
    <li>A call to <code class="language-plaintext highlighter-rouge">start()</code> on a thread <em>happens-before</em> any actions in the started thread.</li>
    <li>All actions in a thread <em>happen-before</em> any other thread successfully returns from a <code class="language-plaintext highlighter-rouge">join()</code> on that thread.</li>
    <li>The default initialization of any object <em>happens-before</em> any other actions (other than default-writes) of a program.</li>
  </ul>
</blockquote>

<p>网上的资料普遍都认为setArray是为了保证上述第二条定义，即对一个volatile field的写入操作 happens-before所有读的操作。听起来好像没毛病，即set操作happens-before所有其他线程的get操作，但真的是这样的吗？</p>

<p>事实上，我觉得这种解释有断章取义的嫌疑。首先，上面的定义确实是存在这么一种关系，不过前文说的很清楚，这种关系的前提是数据发生竞争(The <em>happens-before</em> relation defines when data races take place)。</p>

<p>在CopyOnWriteArrayList中，get操作是无锁的，而set操作在不存在数据变更时，实际上和get操作根本不存在什么数据竞争，因此根本就不满足JLS中data races take place这个条件。</p>

<p>当我带着这个疑问翻开jdk12的源码时，发现了个更尴尬的问题</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @throws IndexOutOfBoundsException {@inheritDoc}
 */</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="no">E</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">getArray</span><span class="o">();</span>
    <span class="no">E</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">elementAt</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">oldValue</span> <span class="o">!=</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">es</span> <span class="o">=</span> <span class="n">es</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
      <span class="n">es</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">element</span><span class="o">;</span>
      <span class="n">setArray</span><span class="o">(</span><span class="n">es</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上面代码是原封不动copy自openjdk-jdk12u的源码，地址在这里<a href="https://github.com/AdoptOpenJDK/openjdk-jdk12u/blob/master/src/java.base/share/classes/java/util/concurrent/CopyOnWriteArrayList.java"><strong>CopyOnWriteArrayList.java</strong></a>。可以看到，openjdk12已经把这个没用的操作移除了，我感觉happens-before一说是不攻自破了。</p>

<p>这问题是有点转牛角尖，感觉意义不是特别大，大部分普通人都不会通读JLS(不然每个人都是Java专家了)，更过分的是用这题来做面试题，这就太折磨人了。</p>

:ET